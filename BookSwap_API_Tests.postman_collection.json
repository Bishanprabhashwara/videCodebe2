{
  "info": {
    "name": "BookSwap API Test Collection",
    "description": "Comprehensive test cases for BookSwap backend API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "01 - Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check passes', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.status).to.equal('OK');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "02 - Register User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"testuser123\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "register"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('User registered successfully', function () {",
              "    pm.response.to.have.status(201);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "03 - Login User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"emailOrUsername\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Login successful', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.data.token).to.exist;",
              "    ",
              "    pm.collectionVariables.set('authToken', responseJson.data.token);",
              "    pm.collectionVariables.set('userId', responseJson.data.user._id);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "04 - Get Current User",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/me",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "me"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Current user retrieved', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.data.user).to.exist;",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "05 - Add New Book",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Test Book Title\",\n  \"author\": \"Test Author\",\n  \"genre\": \"Fiction\",\n  \"condition\": \"Good\",\n  \"language\": \"English\",\n  \"description\": \"A test book for API testing\",\n  \"isbn\": \"1234567890\",\n  \"publishedYear\": 2020,\n  \"publisher\": \"Test Publisher\",\n  \"pageCount\": 300\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/books",
          "host": ["{{baseUrl}}"],
          "path": ["api", "books"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Book created successfully', function () {",
              "    pm.response.to.have.status(201);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.data.book.title).to.equal('Test Book Title');",
              "    ",
              "    pm.collectionVariables.set('bookId', responseJson.data.book._id);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "06 - Get All Books",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/books?page=1&limit=12",
          "host": ["{{baseUrl}}"],
          "path": ["api", "books"],
          "query": [
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "12"
            }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Books retrieved successfully', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.data.books).to.be.an('array');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "07 - Search Books",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/books?search=test&genre=Fiction",
          "host": ["{{baseUrl}}"],
          "path": ["api", "books"],
          "query": [
            {
              "key": "search",
              "value": "test"
            },
            {
              "key": "genre",
              "value": "Fiction"
            }
          ]
        }
      }
    },
    {
      "name": "08 - Get Book by ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/books/{{bookId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "books", "{{bookId}}"]
        }
      }
    },
    {
      "name": "09 - Update Book",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{authToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Updated Test Book\",\n  \"description\": \"Updated description\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/books/{{bookId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "books", "{{bookId}}"]
        }
      }
    },
    {
      "name": "10 - Get User Profile",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/users/profile/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "users", "profile", "{{userId}}"]
        }
      }
    }
  ]
}
